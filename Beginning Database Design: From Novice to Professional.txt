Ch.1 What Can Go Wrong

general overview of the book, nothign special

1. how the data was gather should be seperate from how it should be stored.
2. brief overview on normal form (without mentioning the jargon)
3. database shouldn't be designed to serve the requirement of a single report,
    report requirement change all the time. Instead it should design according to the data itself.

Ch.2 Guided Tour of the Development Process

1. The important thing is to understand the data that are going to support task
and other likely task, aka "data indepednence"
2. define real world problem statment using UML
3. A table in database is actually a "class" object in software engineering,
    with each "column"/"field" as "attribute"/"properties". There is no "method" to a table
    since it is mainly for data storage.
4. Hence each table should relate to just one thing, and do it exceptionally well.
    just like a class object.
5. relationships is the way that these class interact with each other. this could be zero / one / many,
    depending on the nature of the relationship.

Ch.3 Initial Requirements and Use Cases

1. this chapter is on more qualitative things, but I like how the author on understanding
    the problem first, implementing later
2. it is vitally important to know what the data model need to provide, because it decide
    the complexity of the data model and how to implement it
3. Not everything could be automated should be automated. Some task is better to have human 
    involvement
4. Scope a problem as small and tightly defined as possible in early stage, so it isn't too difficult 
    to expand later when required. i.e Don't boil the entire ocean!
5. think of the different use case, usually it involve input (user input?), output (report?).

The exercise for this chapter is to understand the problem statment and design a solution for it.
1. "dim_student" and "dim_date" are the dimension tables that store info relate to studnet and whether the day 
    is sport days. "fct_attendence" is the fact table that actually store the student attendence record.
2. Use Case (input): Sport teacher can input whether a studnet attend class on a given day.
3. Use Case (event): if the day is a sport day and student has the status of is_school_team. Then teacher
    can find substitute student easily.
4. Use Case (report): school can easily get total number of absent of each student easily
    counting attendance group by student_id


Ch.4 Review of Data Models
1. Optionality: is it 0 or 1? good example of two table, a. student and b. courses. 
Here we must define clearly what exactly is a "student",
can a "student" exist without taking any course (studnet that is no longer actively studying). There is no 
"right" answer to the question, just depend on client/ user requirement.
2. A Cardinality of 1: is there any exception not catered by the data model? 
example of a Weather object / table. The relationship with an Visit object is usually one to one,
but it is possible to have multiple weather in any given day? Should we care?
3. often time a one to one relatioship cannot cater for the need to store history, as only one value can be 
    store. 
4. Many - Many: if we want to store how two instance of a class relate to each other (i.e. the history between table),
    we need to introduce a new intermediate class, where by the relationship between the old objects are 1 to many.
    this intermediate class can sometime be hard to name, so it can be the concat of two existing table.
5. THe intermediate class can also be used to catpure slowing chagning dimension, such as price charged for an order


Exercise 4-1
At first glance an Author can write multiple books, so it is a one to many relationship. But can a "author" write 0 book?
It depends on how we define a book, do we count book that haven't or failed to be publish? Do we count research paper as "book"?

From the other perspective, can a book have no author? 
I think so, e.g. some historical text that no one know who the original author is, say Bible.

Hence the relationship of this simple data model is base on the scope of the problem.

Exercise 4-2
The datamodel shows represented a Cocktail have multiple ingredients while an ingredients can be used in multiple Cocktail receipe.
Which is generally a fact. But it is missing a intermediate class that store that particular instance between cocktail and ingredients.

Exercise 4-3
THis is rather easy. Another history table intermediate class need to be created.